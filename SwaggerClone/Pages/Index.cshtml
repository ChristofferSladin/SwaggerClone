@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="main-container text-center">
    <div class="d-flex justify-content-between">
        <div class="title">
            <h1 class="display-4 title">Swagger Clone</h1>
        </div>
        <div class="reset-btn-container">
            <form method="post" asp-page-handler="Reset">
                <button class="fetch-btn" type="submit">Reset</button>
            </form>
        </div>
    </div>

    <hr class="divider" />

    <div class="extended-actions-container">
        <form method="post" asp-page-handler="Execute">
            <div class="d-flex justify-content-around">
                <div class="form-group">
                    <div class="input-container">
                        <input required id="input" name="Endpoint" type="text">
                        <label class="label" for="input">Endpoint</label>
                        <div class="underline"></div>
                        <div class="sideline"></div>
                        <div class="upperline"></div>
                        <div class="line"></div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="custom-select">
                        <select id="requestType" name="RequestType" required>
                            <option value="GET">GET</option>
                            <option value="DELETE">DELETE</option>
                        </select>
                    </div>
                </div>
                <div class="delete-container">

                    <div class="delete-holder">
                        <div>ID:</div>
                        <input required type="number" id="objectId" class="objectId-input" name="ObjectId" value="@Model.ObjectId">
                    </div>
                </div>
                <input type="hidden" name="JsonPayload" value="@Model.JsonPayload" />
                <button class="fetch-btn" type="submit">Execute</button>
            </div>
        </form>
    </div>

    <div class="response-container">
        @if (!string.IsNullOrEmpty(Model.ApiResponse))
        {
            <pre class="response-display">@Html.Raw(Model.ApiResponse)</pre>
        }
        else if (!string.IsNullOrEmpty(Model.ErrorMessage))
        {
            <div class="response-error">@Model.ErrorMessage</div>
        }
        else
        {
            <div class="response-empty">No response data to display.</div>
        }
    </div>

    <hr class="divider" />

    <form method="post" novalidate>
        <div class="extended-actions-container">
            <div class="input-container">
                <input required type="text" id="apiEndpoint" name="Endpoint">
                <label class="label" for="endpointInput">Endpoint</label>
                <div class="underline"></div>
                <div class="sideline"></div>
                <div class="upperline"></div>
                <div class="line"></div>
            </div>
            <textarea id="jsonPayload" name="JsonPayload">@Model.JsonPayload</textarea>
            <input type="hidden" name="ApiResponse" value="@Model.ApiResponse" />
            <button type="submit" class="fetch-btn" asp-page-handler="FetchJsonTemplate">Get JSON Structure</button>
            <button class="fetch-btn" type="submit" asp-page-handler="Post">POST</button>
            <button class="fetch-btn" type="submit" asp-page-handler="Put">PUT</button>
        </div>
    </form>
</div>

